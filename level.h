
/*level bookmark*/
void level()
{
    step++; 
    for (short buffer=0; buffer<COUNTNUM; buffer++)
    {
        count[buffer]++;
}

    draws=list<Object*>();
    
//Setting 0, Part 0    
if (part==0)
{   
part++; 
gegner(3, 0,0,10,10,0,0,0,0,0,0,
Cor(  0,0,0.002f), Cor(0,-0.00,0), Col(1,1,1,1));
//gegner(6, Cor(0,43.8,14.00f), Cor(0,-0.01,0));
//gegner(6, Cor(0,23.9,14.00f), Cor(0,-0.01,0));
//gegner(6, 11,0,0,Cor(0,0.0,14.00f), Cor(0,0.001,0), Col(1,1,1,1));
//gegner(7, 13,0,0,Cor(0,0.0,14.5f), Cor(0,0.0004,0), Col(0.8,0.8,0.8,1));
//gegner(6, 100,0,0,Cor(0,0.0,15.00f), Cor(0,0.0001,0), Col(1,1,1,1));


}
    
    
//Setting 0, Part 1
if (part==1)
{
if (step>500)
{
             part++;
             }
      
        if(count[0]>160)
        {
            count[0]=0;
        }
        
        if (count[0]==0)
        {
             
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(0,2.0,-0.00f), Cor(0,-0.005,0), Col(1,1,1,1));    
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(0.5f,2.0,-0.00f), Cor(0,-0.001,0), Col(1,1,1,1)); 
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(1.0f,2.0,-0.00f), Cor(0,-0.01,0), Col(1,1,1,1)); 
             gegner(5, 0,0,0,0,0,0,0,0,0,0,
Cor(0.5f,2.0,-0.00f), Cor(0,-0.01,0), Col(1,1,1,1)); 
             gegner(5, 0,0,0,0,0,0,0,0,0,0,
Cor(1.5f,2.0,-0.00f), Cor(0,-0.005,0), Col(1,1,1,1)); 
             gegner(5, 0,0,0,0,0,0,0,0,0,0,
Cor(2.0f,2.0,-0.00f), Cor(0,-0.001,0), Col(1,1,1,1)); 
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(2.5f,2.0,-0.00f), Cor(0,-0.01,0), Col(1,1,1,1)); 
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(-0.5f,2.0,-0.00f), Cor(0,-0.01,0), Col(1,1,1,1)); 
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(-1.0f,2.0,-0.00f), Cor(0,-0.005,0), Col(1,1,1,1));      
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(-1.5f,2.0,-0.00f), Cor(0,-0.001,0), Col(1,1,1,1));    
             gegner(2, 0,0,0,0,0,0,0,0,0,0,
Cor(-2.0f,2.0,-0.00f), Cor(0,-0.01,0), Col(1,1,1,1));    
             
        }
        
        if ((rand()%1000)>700)
        {
        }  
        
        //Wiese            
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
       gegner(1, 0,0,0,0,0,0,0,0,0,0,
Cor(  0.005*(rand()%1000)-2.5,2.0f,0.2f), Cor(0,-0.03,0), Col(1,1,1,1));
}

//Setting 0, Part 2

if (part==2)
{   
part++; 
step = 0;

gegner(6, 11,0,10,0,0,0,0,0,0,0,
Cor(0,0.0,14.00f), Cor(0,0.001,0), Col(1,1,1,1));
gegner(6, 100,0,10,10,0,0,0,0,0,0,
Cor(0,0.0,15.00f), Cor(0,0.0001,0), Col(1,1,1,1));
gegner(6, 101,0,10,10,0,0,0,0,0,0,
Cor(0,0.0,14.5f), Cor(0,0.0015,0), Col(1.0,1.0,1.0,0.1));
gegner(6, 102,0,3,10,0,0,0,0,0,0,
Cor(0,0.0,13.00f), Cor(0,0.0030,0), Col(1.0,1.0,1.0,0.2));  
}
          
if (part==3)
{
if (step>200)
{
            gegner(6, 102,1,6,10,0,30,0,0,0,0,
Cor(1.0, 0,13.00f), Cor(0,0.002,0), Col(1.0,0.8,0.8,0.05)); 
           gegner(6, 102,1,6,10,0,30,0,0,0,0,
Cor(1.0,0.0,12.00f), Cor(0,0.001,0), Col(1.0,0.5,1.0, 0.01));
            gegner(6, 102,1,6,10,0,30,0,0,0,0,
Cor(1.0,0.0,11.00f), Cor(0,0.0015,0), Col(0.8,0.2,1.0,0.08));
            part++;
}}

if (part==4)
{
            if (step>600)
            {
part++;
gegner(6, 103,1,250,250,142,0,0,0,0,0,
Cor(0,0.0,10.00f), Cor(0,0,-0.1), Col(1.0,1.0,1.0,0.1));
gegner(9, 0,0,0,0,0,0,0,0,0,0,
Cor(0,1.0,12.00f), Cor(0,0,-0.02), Col(1.0,1.0,1.0,0.04));
            }
}
//reset pointerliste
    for (rootit=roots.begin(); rootit!=roots.end(); rootit++)
    {
    if ((rootit->state)==0){rootit=roots.erase(rootit);}
    }        
        
    for (rootit=roots.begin(); rootit!=roots.end(); rootit++)
    {
    (*rootit).prg();
    }
    
};
